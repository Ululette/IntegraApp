{"version":3,"sources":["../../src/constants.ts","../../src/logger.ts","../../src/helpers.ts","../../src/errors.ts","../../src/get-config.ts","../../src/initialize-ids.ts","../../src/factory.ts","../../src/functions.ts","../../index.ts"],"names":["GtagCommand","EventName","GTAG_URL","logger","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","measurementId","gtagParams","correspondingAppId","Promise","all","dynamicConfigResults","foundConfig","find","config","appId","error","CONFIG","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","Array","isArray","sendToId","initializationPromise","push","length","Object","values","EVENT","wrapOrCreateGtag","dataLayerName","gtagFunctionName","window","arguments","command","idOrNameOrParams","SET","wrapGtag","wrappedGtag","ERRORS","ERROR_FACTORY","defaultRetryData","throttleMetadata","intervalMillis","getThrottleMetadata","this","setThrottleMetadata","metadata","deleteThrottleMetadata","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","appFields","request","method","headers","appUrl","replace","fetch","response","status","errorMessage","json","jsonResponse","message","create","httpStatus","responseMessage","attemptFetchDynamicConfigWithRetry","signal","retryData","throttleEndTimeMillis","backoffCount","setAbortableTimeout","warn","e","customData","Number","isRetriableError","backoffMillis","Date","now","debug","resolve","reject","Math","max","timeout","setTimeout","addEventListener","clearTimeout","listeners","listener","abort","forEach","initializeIds","app","installations","dynamicConfigPromise","timeoutMillis","options","AnalyticsAbortSignal","undefined","fetchDynamicConfigWithRetry","then","catch","fidPromise","errorInfo","validateIndexedDB","envIsValid","getId","dynamicConfig","fid","scriptTags","document","getElementsByTagName","tag","src","includes","findGtagScriptOnPage","script","createElement","async","head","appendChild","insertScriptTag","update","configProperties","gtagCoreFunction","wrappedGtagFunction","gtagName","globalInitDone","settings","factory","mismatchedEnvMessages","details","map","index","join","err","warnOnBrowserContextMismatch","id","dataLayer","getOrCreateDataLayer","logEvent","eventName","eventParams","gtagFunction","global","params","setCurrentScreen","screenName","setUserId","setUserProperties","properties","flatProperties","keys","key","setAnalyticsCollectionEnabled","enabled","INTERNAL","delete","instance","ANALYTICS_TYPE","isSupported","registerComponent","container","getProvider","getImmediate","setServiceProps","reason","registerVersion"],"mappings":"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","file":"static/js/7.9d5ac03b.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/**\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n *\n * @public\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /**\n   * @deprecated\n   * This event name is deprecated and is unsupported in updated\n   * Enhanced Ecommerce reports.\n   */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DynamicConfig,\n  ThrottleMetadata,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.customData.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  Gtag,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations FirebaseInstallations instance.\n *\n * @returns Measurement ID.\n */\nexport async function initializeIds(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: FirebaseInstallations,\n  gtagCore: Gtag,\n  dataLayerName: string\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  const configProperties: { [key: string]: string | boolean } = {\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  };\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions,\n  DynamicConfig,\n  MinimalDynamicConfig,\n  AnalyticsCallOptions,\n  CustomParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { initializeIds } from './initialize-ids';\nimport { logger } from './logger';\nimport { FirebaseService } from '@firebase/app-types/private';\n\ninterface FirebaseAnalyticsInternal\n  extends FirebaseAnalytics,\n    FirebaseService {}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName\n  );\n\n  const analyticsInstance: FirebaseAnalyticsInternal = {\n    app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: (\n      eventName: string,\n      eventParams?: EventParams | CustomParams,\n      options?: AnalyticsCallOptions\n    ) => {\n      logEvent(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        eventName,\n        eventParams,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setCurrentScreen: (screenName, options) => {\n      setCurrentScreen(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        screenName,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserId: (id, options) => {\n      setUserId(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        id,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserProperties: (properties, options) => {\n      setUserProperties(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        properties,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setAnalyticsCollectionEnabled: enabled => {\n      setAnalyticsCollectionEnabled(\n        initializationPromisesMap[appId],\n        enabled\n      ).catch(e => logger.error(e));\n    },\n    INTERNAL: {\n      delete: (): Promise<void> => {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  factory,\n  settings,\n  resetGlobalVars,\n  getGlobalVars\n} from './src/factory';\nimport { EventName } from './src/constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './src/errors';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension\n} from '@firebase/util';\nimport { name, version } from './package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\n\nexport function registerAnalytics(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factory(app, installations);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      settings,\n      EventName,\n      isSupported\n    })\n  );\n\n  instance.INTERNAL.registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  instance.registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nexport { factory, settings, resetGlobalVars, getGlobalVars };\n\nregisterAnalytics(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n\n/**\n * this is a public static method provided to users that wraps four different checks:\n *\n * 1. check if it's not a browser extension environment.\n * 1. check if cookie is enabled in current browser.\n * 3. check if IndexedDB is supported by the browser environment.\n * 4. check if the current browser context is valid for using IndexedDB.\n *\n */\nasync function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n"],"sourceRoot":""}