{"version":3,"sources":["../../src/client/caching_client.ts","../../src/errors.ts","../../src/client/rest_client.ts","../../src/language.ts","../../src/client/remote_config_fetch_client.ts","../../src/value.ts","../../src/remote_config.ts","../../src/storage/storage.ts","../../src/storage/storage_cache.ts","../../src/client/retrying_client.ts","../../index.ts"],"names":["client","storage","storageCache","logger","isCachedDataFresh","cacheMaxAgeMillis","lastSuccessfulFetchTimestampMillis","this","debug","cacheAgeMillis","Date","now","fetch","request","Promise","all","getLastSuccessfulFetchTimestampMillis","getLastSuccessfulFetchResponse","lastSuccessfulFetchResponse","eTag","response","storageOperations","setLastSuccessfulFetchTimestampMillis","status","push","setLastSuccessfulFetchResponse","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","firebaseInstallations","sdkVersion","namespace","projectId","apiKey","appId","getId","getToken","installationId","installationToken","urlBase","window","FIREBASE_REMOTE_CONFIG_URL_BASE","url","headers","requestBody","sdk_version","app_instance_id","app_instance_id_token","app_id","language_code","navigatorLanguage","navigator","languages","language","options","method","body","JSON","stringify","fetchPromise","timeoutPromise","_resolve","reject","signal","addEventListener","error","Error","name","race","errorCode","create","originalErrorMessage","message","responseEtag","get","undefined","responseBody","json","config","state","httpStatus","listeners","listener","abort","forEach","BOOLEAN_TRUTHY_VALUES","_source","_value","asString","asBoolean","indexOf","toLowerCase","asNumber","num","Number","isNaN","getSource","app","_client","_storageCache","_storage","_logger","_isInitializationComplete","settings","fetchTimeoutMillis","minimumFetchIntervalMillis","defaultConfig","setLogLevel","logLevel","FirebaseLogLevel","DEBUG","SILENT","ERROR","getLastFetchStatus","activate","getActiveConfigEtag","activeConfigEtag","setActiveConfig","setActiveConfigEtag","ensureInitialized","_initializePromise","loadFromStorage","then","abortSignal","RemoteConfigAbortSignal","setTimeout","setLastFetchStatus","lastFetchStatus","e","code","fetchAndActivate","getAll","obj1","obj2","Object","keys","getAllKeys","getActiveConfig","reduce","allConfigs","key","getValue","getBoolean","getNumber","getString","activeConfig","Value","String","toFirebaseError","event","originalError","target","APP_NAMESPACE_STORE","appName","openDbPromise","resolve","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","set","timestamp","etag","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","delete","objectStore","transaction","compositeKey","createCompositeKey","value","put","join","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","timestampMillis","setAbortableTimeout","throttleEndTimeMillis","backoffMillis","Math","max","timeout","clearTimeout","firebaseInstance","throttleMetadata","backoffCount","attemptFetch","customData","isRetriableError","INTERNAL","registerComponent","container","getProvider","getImmediate","installations","packageName","restClient","SDK_VERSION","retryingClient","cachingClient","remoteConfigInstance","setMultipleInstances","registerVersion"],"mappings":"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","file":"static/js/10.a49ec37d.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [\n      lastSuccessfulFetchTimestampMillis,\n      lastSuccessfulFetchResponse\n    ] = await Promise.all([\n      this.storage.getLastSuccessfulFetchTimestampMillis(),\n      this.storage.getLastSuccessfulFetchResponse()\n    ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: FirebaseInstallations,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if (originalError.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  Settings,\n  Value as ValueType,\n  LogLevel as RemoteConfigLogLevel\n} from '@firebase/remote-config-types';\nimport { StorageCache } from './storage/storage_cache';\nimport {\n  RemoteConfigFetchClient,\n  RemoteConfigAbortSignal\n} from './client/remote_config_fetch_client';\nimport { Value } from './value';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { Storage } from './storage/storage';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  // Tracks completion of initialization promise.\n  private _isInitializationComplete = false;\n\n  // De-duplicates initialization calls.\n  private _initializePromise?: Promise<void>;\n\n  settings: Settings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    switch (logLevel) {\n      case 'debug':\n        this._logger.logLevel = FirebaseLogLevel.DEBUG;\n        break;\n      case 'silent':\n        this._logger.logLevel = FirebaseLogLevel.SILENT;\n        break;\n      default:\n        this._logger.logLevel = FirebaseLogLevel.ERROR;\n    }\n  }\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    private readonly _client: RemoteConfigFetchClient,\n    private readonly _storageCache: StorageCache,\n    private readonly _storage: Storage,\n    private readonly _logger: Logger\n  ) {}\n\n  async activate(): Promise<boolean> {\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n      this._storage.getLastSuccessfulFetchResponse(),\n      this._storage.getActiveConfigEtag()\n    ]);\n    if (\n      !lastSuccessfulFetchResponse ||\n      !lastSuccessfulFetchResponse.config ||\n      !lastSuccessfulFetchResponse.eTag ||\n      lastSuccessfulFetchResponse.eTag === activeConfigEtag\n    ) {\n      // Either there is no successful fetched config, or is the same as current active\n      // config.\n      return false;\n    }\n    await Promise.all([\n      this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n      this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n    ]);\n    return true;\n  }\n\n  ensureInitialized(): Promise<void> {\n    if (!this._initializePromise) {\n      this._initializePromise = this._storageCache\n        .loadFromStorage()\n        .then(() => {\n          this._isInitializationComplete = true;\n        });\n    }\n    return this._initializePromise;\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  async fetch(): Promise<void> {\n    // Aborts the request after the given timeout, causing the fetch call to\n    // reject with an AbortError.\n    //\n    // <p>Aborting after the request completes is a no-op, so we don't need a\n    // corresponding clearTimeout.\n    //\n    // Locating abort logic here because:\n    // * it uses a developer setting (timeout)\n    // * it applies to all retries (like curl's max-time arg)\n    // * it is consistent with the Fetch API's signal input\n    const abortSignal = new RemoteConfigAbortSignal();\n\n    setTimeout(async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      abortSignal.abort();\n    }, this.settings.fetchTimeoutMillis);\n\n    // Catches *all* errors thrown by client so status can be set consistently.\n    try {\n      await this._client.fetch({\n        cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,\n        signal: abortSignal\n      });\n\n      await this._storageCache.setLastFetchStatus('success');\n    } catch (e) {\n      const lastFetchStatus = hasErrorCode(e, ErrorCode.FETCH_THROTTLE)\n        ? 'throttle'\n        : 'failure';\n      await this._storageCache.setLastFetchStatus(lastFetchStatus);\n      throw e;\n    }\n  }\n\n  async fetchAndActivate(): Promise<boolean> {\n    await this.fetch();\n    return this.activate();\n  }\n\n  getAll(): { [key: string]: ValueType } {\n    return getAllKeys(\n      this._storageCache.getActiveConfig(),\n      this.defaultConfig\n    ).reduce((allConfigs, key) => {\n      allConfigs[key] = this.getValue(key);\n      return allConfigs;\n    }, {} as { [key: string]: ValueType });\n  }\n\n  getBoolean(key: string): boolean {\n    return this.getValue(key).asBoolean();\n  }\n\n  getNumber(key: string): number {\n    return this.getValue(key).asNumber();\n  }\n\n  getString(key: string): string {\n    return this.getValue(key).asString();\n  }\n\n  getValue(key: string): ValueType {\n    if (!this._isInitializationComplete) {\n      this._logger.debug(\n        `A value was requested for key \"${key}\" before SDK initialization completed.` +\n          ' Await on ensureInitialized if the intent was to get a previously activated value.'\n      );\n    }\n    const activeConfig = this._storageCache.getActiveConfig();\n    if (activeConfig && activeConfig[key] !== undefined) {\n      return new Value('remote', activeConfig[key]);\n    } else if (this.defaultConfig && this.defaultConfig[key] !== undefined) {\n      return new Value('default', String(this.defaultConfig[key]));\n    }\n    this._logger.debug(\n      `Returning static value for key \"${key}\".` +\n        ' Define a default or remote value if this is unintentional.'\n    );\n    return new Value('static');\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n    };\n    request.onsuccess = event => {\n      resolve((event.target as IDBOpenDBRequest).result);\n    };\n    request.onupgradeneeded = event => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (event.oldVersion) {\n        case 0:\n          db.createObjectStore(APP_NAMESPACE_STORE, {\n            keyPath: 'compositeKey'\n          });\n      }\n    };\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { RemoteConfig as RemoteConfigType } from '@firebase/remote-config-types';\nimport { CachingClient } from './src/client/caching_client';\nimport { RestClient } from './src/client/rest_client';\nimport { RemoteConfig } from './src/remote_config';\nimport { Storage } from './src/storage/storage';\nimport { StorageCache } from './src/storage/storage_cache';\nimport { ERROR_FACTORY, ErrorCode } from './src/errors';\nimport { RetryingClient } from './src/client/retrying_client';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { name as packageName, version } from './package.json';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport function registerRemoteConfig(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    { instanceIdentifier: namespace }: InstanceFactoryOptions\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container.getProvider('installations').getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      firebaseInstance.SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfig(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    remoteConfigInstance.ensureInitialized();\n\n    return remoteConfigInstance;\n  }\n}\n\nregisterRemoteConfig(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    remoteConfig?: {\n      (app?: FirebaseApp): RemoteConfigType;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigType;\n  }\n}\n"],"sourceRoot":""}