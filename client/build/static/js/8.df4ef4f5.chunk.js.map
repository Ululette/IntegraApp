{"version":3,"sources":["../../src/interfaces/internal-message-payload.ts","../../src/util/errors.ts","../../src/util/constants.ts","../../src/helpers/array-base64-translator.ts","../../src/helpers/migrate-old-database.ts","../../src/helpers/idb-manager.ts","../../src/core/api.ts","../../src/core/token-management.ts","../../src/helpers/is-console-message.ts","../../src/helpers/sleep.ts","../../src/controllers/sw-controller.ts","../../src/helpers/externalizePayload.ts","../../src/controllers/window-controller.ts","../../src/helpers/extract-app-config.ts","../../src/index.ts"],"names":["MessageType","ERROR_MAP","ERROR_FACTORY","DEFAULT_VAPID_KEY","CONSOLE_CAMPAIGN_ID","arrayToBase64","array","uint8Array","Uint8Array","btoa","String","fromCharCode","replace","base64ToArray","base64String","base64","repeat","length","rawData","atob","outputArray","i","charCodeAt","OLD_DB_NAME","OLD_OBJECT_STORE_NAME","migrateOldDatabase","senderId","indexedDB","databases","map","db","name","includes","tokenDetails","oldVersion","objectStoreNames","contains","objectStore","transaction","index","get","value","clear","oldDetails","auth","p256dh","endpoint","token","fcmToken","createTime","Date","now","subscriptionOptions","swScope","vapidKey","close","checkTokenDetails","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeDb","createObjectStore","dbGet","firebaseDependencies","key","getKey","appConfig","oldTokenDetails","dbSet","tx","put","complete","dbRemove","delete","appId","requestGetToken","getHeaders","headers","body","getBody","subscribeOptions","method","JSON","stringify","fetch","getEndpoint","json","responseData","create","errorInfo","error","message","requestUpdateToken","updateOptions","requestDeleteToken","unsubscribeOptions","ENDPOINT","installations","getToken","authToken","Headers","Accept","apiKey","web","applicationPubKey","swRegistration","Notification","permission","getPushSubscription","pushSubscription","scope","getNewToken","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","isTokenValid","console","warn","updateToken","deleteToken","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","subscription","subscribe","userVisibleOnly","applicationServerKey","isConsoleMessage","data","sleep","ms","Promise","resolve","setTimeout","isOnBackgroundMessageUsed","bgMessageHandler","self","addEventListener","e","waitUntil","onPush","onSubChange","onNotificationClick","this","app","setBackgroundMessageHandler","callback","onBackgroundMessage","nextOrObserver","registration","requestPermission","usePublicVapidKey","useServiceWorker","onMessage","onTokenRefresh","event","internalPayload","err","getMessagePayloadInternal","getClientList","debug","TAG","clientList","some","client","visibilityState","url","startsWith","hasVisibleClients","sendMessagePayloadInternalToWindows","isNotificationShown","notification","showNotification","wrapInternalPayload","payload","from","collapseKey","collapse_key","messagePayloadInternal","title","image","propagateNotificationPayload","propagateDataPayload","fcmOptions","link","analyticsLabel","analytics_label","propagateFcmOptions","externalizePayload","next","action","stopImmediatePropagation","click_action","location","origin","getLink","URL","href","originUrl","host","getWindowClient","clients","openWindow","focus","messageType","NOTIFICATION_CLICKED","isFirebaseMessaging","postMessage","wrappedInternalPayload","clientUrl","PUSH_RECEIVED","matchAll","type","includeUncontrolled","notificationPayloadInternal","actions","maxActions","onMessageCallback","navigator","serviceWorker","messageEventListener","stripInternalFields","Object","assign","dataPayload","logEvent","getVapidKey","getSwReg","options","updateVapidKey","updateSwReg","serviceWorkerRegistration","registerDefaultSw","ServiceWorkerRegistration","register","update","catch","browserErrorMessage","permissionResult","eventType","Error","getEventType","analyticsProvider","message_id","message_name","message_time","message_device_time","Math","floor","getMissingValueError","valueName","NAMESPACE_EXPORTS","isSupported","prototype","hasOwnProperty","PushSubscription","window","cookieEnabled","INTERNAL","registerComponent","container","getProvider","getImmediate","keyName","appName","projectId","messagingSenderId","extractAppConfig","setServiceProps"],"mappings":";sHAoDYA,E,yCCbCC,IAAS,MACpB,6BACE,kDACF,8BACE,gDACF,0BACE,wDACF,wBACE,qEACF,wBACE,mEACF,yBACE,2EACF,wCACE,+EACF,4BACE,qEACF,8BACE,2DACF,8BACE,yEAEF,yBACE,oEACF,2BACE,wDACF,4BACE,4IAEF,6BACE,uEACF,wBACE,iEACF,uBAA+B,yCAC/B,mCACE,wIAEH,GAYYC,EAAgB,IAAI,IAC/B,YACA,YACAD,GCvEWE,EACX,0FAUWC,EAAsB,kB,SCdnBC,EAAcC,GAC5B,IAAMC,EAAa,IAAIC,WAAWF,GAElC,OADqBG,KAAKC,OAAOC,aAAY,MAAnBD,OAAM,2BAAiBH,MAC7BK,QAAQ,KAAM,IAAIA,QAAQ,MAAO,KAAKA,QAAQ,MAAO,K,SAG3DC,EAAcC,GAS5B,IARA,IACMC,GAAUD,EADA,IAAIE,QAAQ,EAAKF,EAAaG,OAAS,GAAM,IAE1DL,QAAQ,MAAO,KACfA,QAAQ,KAAM,KAEXM,EAAUC,KAAKJ,GACfK,EAAc,IAAIZ,WAAWU,EAAQD,QAElCI,EAAI,EAAGA,EAAIH,EAAQD,SAAUI,EACpCD,EAAYC,GAAKH,EAAQI,WAAWD,GAEtC,OAAOD,GHiBT,SAAYpB,GACV,gCACA,8CAFF,CAAYA,MAAW,KISvB,IAAMuB,EAAc,uBAMdC,EAAwB,yB,SAERC,EACpBC,G,mIAEI,cAAeC,UAGC,GAAOA,UAEtBC,aALD,M,OAQF,GALMA,EAAY,UAGFA,EAAUC,KAAI,SAAAC,GAAM,OAAAA,EAAGC,QAE1BC,SAAST,GAEpB,SAAO,M,iBAMA,OAFPU,EAAoC,KAE7B,GAAM,iBAAOV,EAtBH,GAsBgC,SAAMO,GAAE,+C,wEAC3D,OAAIA,EAAGI,WAAa,EAElB,IAGGJ,EAAGK,iBAAiBC,SAASZ,GAMpB,IADRa,EAAcP,EAAGQ,YAAYD,YAAYb,IACfe,MAAM,eAAeC,IAAId,IAJvD,I,OAKF,OADMe,EAAQ,SACd,GAAMJ,EAAYK,S,OAElB,GAFA,UAEKD,EAEH,UAGF,GAAsB,IAAlBX,EAAGI,WAAkB,CAGvB,KAFMS,EAAaF,GAEHG,OAASD,EAAWE,SAAWF,EAAWG,SACxD,UAGFb,EAAe,CACbc,MAAOJ,EAAWK,SAClBC,WAAiC,QAArB,EAAAN,EAAWM,kBAAU,QAAIC,KAAKC,MAC1CC,oBAAqB,CACnBR,KAAMD,EAAWC,KACjBC,OAAQF,EAAWE,OACnBC,SAAUH,EAAWG,SACrBO,QAASV,EAAWU,QACpBC,SACiC,kBAAxBX,EAAWW,SACdX,EAAWW,SACXjD,EAAcsC,EAAWW,iBAGR,IAAlBxB,EAAGI,YAce,IAAlBJ,EAAGI,cAXZD,EAAe,CACbc,OAHIJ,EAAaF,GAGCO,SAClBC,WAAYN,EAAWM,WACvBG,oBAAqB,CACnBR,KAAMvC,EAAcsC,EAAWC,MAC/BC,OAAQxC,EAAcsC,EAAWE,QACjCC,SAAUH,EAAWG,SACrBO,QAASV,EAAWU,QACpBC,SAAUjD,EAAcsC,EAAWW,a,4BAsB3C,OA1EW,SAuERC,QAGH,GAAM,mBAAShC,I,OACf,OADA,SACA,GAAM,mBAAS,yB,OACf,OADA,SACA,GAAM,mBAAS,c,OAEf,OAFA,SAEA,GAAOiC,EAAkBvB,GAAgBA,EAAe,aAG1D,SAASuB,EACPvB,GAEA,IAAKA,IAAiBA,EAAamB,oBACjC,OAAO,EAED,IAAAA,EAAwBnB,EAAL,oBAC3B,MACqC,kBAA5BA,EAAagB,YACpBhB,EAAagB,WAAa,GACI,kBAAvBhB,EAAac,OACpBd,EAAac,MAAM9B,OAAS,GACQ,kBAA7BmC,EAAoBR,MAC3BQ,EAAoBR,KAAK3B,OAAS,GACI,kBAA/BmC,EAAoBP,QAC3BO,EAAoBP,OAAO5B,OAAS,GACI,kBAAjCmC,EAAoBN,UAC3BM,EAAoBN,SAAS7B,OAAS,GACC,kBAAhCmC,EAAoBC,SAC3BD,EAAoBC,QAAQpC,OAAS,GACG,kBAAjCmC,EAAoBE,UAC3BF,EAAoBE,SAASrC,OAAS,ECtKnC,IAEDwC,EAAoB,2BAEtBC,EAAgC,KACpC,SAASC,IAaP,OAZKD,IACHA,EAAY,iBAPa,8BACJ,GAM+B,SAAAE,GAKlD,OAAQA,EAAU1B,YAChB,KAAK,EACH0B,EAAUC,kBAAkBJ,QAI7BC,E,SAIaI,EACpBC,G,wHAGW,OADLC,EAAMC,EAAOF,GACR,GAAMJ,K,OACI,SADV,SAERrB,YAAYmB,GACZpB,YAAYoB,GACZjB,IAAIwB,I,cAHD/B,EAAe,UAMnB,GAAOA,GADL,M,OAIsB,SAAMR,EAC5BsC,EAAqBG,UAAUxC,W,cAD3ByC,EAAkB,UAItB,GAAMC,EAAML,EAAsBI,IADhC,M,OAEF,OADA,SACA,GAAOA,G,iCAMSC,EACpBL,EACA9B,G,wHAGW,OADL+B,EAAMC,EAAOF,GACR,GAAMJ,K,OAEjB,OAFM7B,EAAK,SAEX,IADMuC,EAAKvC,EAAGQ,YAAYmB,EAAmB,cACpCpB,YAAYoB,GAAmBa,IAAIrC,EAAc+B,I,OAC1D,OADA,SACA,GAAMK,EAAGE,U,OACT,OADA,SACA,GAAOtC,U,SAIauC,EACpBT,G,wHAGW,OADLC,EAAMC,EAAOF,GACR,GAAMJ,K,OAEjB,OAFM7B,EAAK,SAEX,IADMuC,EAAKvC,EAAGQ,YAAYmB,EAAmB,cACpCpB,YAAYoB,GAAmBgB,OAAOT,I,OAC/C,OADA,SACA,GAAMK,EAAGE,U,cAAT,S,WAYF,SAASN,EAAO,GACd,OADyB,YACRS,M,SClEGC,EACpBZ,EACAX,G,8HAEgB,SAAMwB,EAAWb,I,OAA3Bc,EAAU,SACVC,EAAOC,EAAQ3B,GAEf4B,EAAmB,CACvBC,OAAQ,OACRJ,QAAO,EACPC,KAAMI,KAAKC,UAAUL,I,iBAKJ,O,sBAAA,GAAMM,MACrBC,EAAYtB,EAAqBG,WACjCc,I,OAEa,SAJE,SAIaM,Q,cAA9BC,EAAe,S,aAEf,M,WAAMrF,EAAcsF,OAAM,yBAAmC,CAC3DC,UAAW,I,OAIf,GAAIF,EAAaG,MAEf,MADMC,EAAUJ,EAAaG,MAAMC,QAC7BzF,EAAcsF,OAAM,yBAAmC,CAC3DC,UAAWE,IAIf,IAAKJ,EAAaxC,MAChB,MAAM7C,EAAcsF,OAAM,4BAG5B,SAAOD,EAAaxC,c,SAGA6C,EACpB7B,EACA9B,G,8HAEgB,SAAM2C,EAAWb,I,OAA3Bc,EAAU,SACVC,EAAOC,EAAQ9C,EAAamB,qBAE5ByC,EAAgB,CACpBZ,OAAQ,QACRJ,QAAO,EACPC,KAAMI,KAAKC,UAAUL,I,iBAKJ,O,sBAAA,GAAMM,MAClBC,EAAYtB,EAAqBG,WAAU,IAAIjC,EAAac,MAC/D8C,I,OAEa,SAJE,SAIaP,Q,cAA9BC,EAAe,S,aAEf,M,WAAMrF,EAAcsF,OAAM,sBAAgC,CACxDC,UAAW,I,OAIf,GAAIF,EAAaG,MAEf,MADMC,EAAUJ,EAAaG,MAAMC,QAC7BzF,EAAcsF,OAAM,sBAAgC,CACxDC,UAAWE,IAIf,IAAKJ,EAAaxC,MAChB,MAAM7C,EAAcsF,OAAM,yBAG5B,SAAOD,EAAaxC,c,SAGA+C,EACpB/B,EACAhB,G,4HAEgB,SAAM6B,EAAWb,I,OAA3Bc,EAAU,SAEVkB,EAAqB,CACzBd,OAAQ,SACRJ,QAAO,G,iBAIU,O,sBAAA,GAAMO,MAClBC,EAAYtB,EAAqBG,WAAU,IAAInB,EAClDgD,I,OAEgC,SAJjB,SAIgCT,Q,OACjD,IADMC,EAA4B,UACjBG,MAEf,MADMC,EAAUJ,EAAaG,MAAMC,QAC7BzF,EAAcsF,OAAM,2BAAqC,CAC7DC,UAAWE,I,mBAIf,M,WAAMzF,EAAcsF,OAAM,2BAAqC,CAC7DC,UAAW,I,wBAKjB,SAASJ,EAAY,GACnB,MAAUW,uDADoB,YACW,iBAG3C,SAAepB,EAAW,G,IACxBV,EAAS,YACT+B,EAAa,gB,oHAEK,SAAMA,EAAcC,Y,OAEtC,OAFMC,EAAY,SAElB,GAAO,IAAIC,QAAQ,CACjB,eAAgB,mBAChBC,OAAQ,mBACR,iBAAkBnC,EAAUoC,OAC5B,qCAAsC,OAAOH,YAIjD,SAASpB,EAAQ,G,IACflC,EAAM,SACND,EAAI,OACJE,EAAQ,WACRQ,EAAQ,WAEFwB,EAAuB,CAC3ByB,IAAK,CACHzD,SAAQ,EACRF,KAAI,EACJC,OAAM,IAQV,OAJIS,IAAanD,IACf2E,EAAKyB,IAAIC,kBAAoBlD,GAGxBwB,E,SCzJaoB,EACpBnC,EACA0C,EACAnD,G,0HAEA,GAAgC,YAA5BoD,aAAaC,WACf,MAAMzG,EAAcsF,OAAM,sBAKH,SAAMoB,EAAoBH,EAAgBnD,I,OAC9C,OADfuD,EAAmB,SACJ,GAAM/C,EAAMC,I,cAA3B9B,EAAe,SAEfmB,EAA2C,CAC/CE,SAAQ,EACRD,QAASoD,EAAeK,MACxBhE,SAAU+D,EAAiB/D,SAC3BF,KAAMvC,EAAcwG,EAAiB5C,OAAO,SAC5CpB,OAAQxC,EAAcwG,EAAiB5C,OAAO,YAG3ChC,EAAD,MAEF,GAAO8E,EAAYhD,EAAsBX,I,UAsH7C,SACE4D,EACAC,GAEA,IAAMC,EAAkBD,EAAe3D,WAAa0D,EAAU1D,SACxD6D,EAAkBF,EAAenE,WAAakE,EAAUlE,SACxDsE,EAAcH,EAAerE,OAASoE,EAAUpE,KAChDyE,EAAgBJ,EAAepE,SAAWmE,EAAUnE,OAE1D,OAAOqE,GAAmBC,GAAmBC,GAAeC,EA7HzDC,CAAarF,EAAamB,oBAAsBA,GAAjD,Y,iBAIE,O,sBAAA,GAAM0C,EAAmB/B,EAAsB9B,EAAac,Q,cAA5D,S,+BAGAwE,QAAQC,KAAK,G,aAGf,SAAOT,EAAYhD,EAAsBX,I,OACpC,OAAIF,KAAKC,OAASlB,EAAagB,WAvCZ,OAyCxB,GAAOwE,EACL,CACE1E,MAAOd,EAAac,MACpBE,WAAYC,KAAKC,MACjBC,oBAAmB,GAErBW,EACA0C,IAIF,GAAOxE,EAAac,O,iCAQF2E,EACpB3D,EACA0C,G,sHAEqB,SAAM3C,EAAMC,I,cAA3B9B,EAAe,UAEnB,GAAM6D,EAAmB/B,EAAsB9B,EAAac,QAD1D,M,OAEF,OADA,SACA,GAAMyB,EAAST,I,OAAf,S,iBAIuB,SAAM0C,EAAekB,YAAYC,mB,OAC1D,OADMf,EAAmB,UAEvB,GAAOA,EAAiBgB,eAI1B,IAAO,UAGT,SAAeJ,EACbxF,EACA8B,EACA0C,G,wHAGuB,O,sBAAA,GAAMb,EACzB7B,EACA9B,I,OASF,OAXM6F,EAAe,SAKfC,EAAmB,2BACpB9F,GAAY,CACfc,MAAO+E,EACP7E,WAAYC,KAAKC,QAGnB,GAAMiB,EAAML,EAAsBgE,I,OAClC,OADA,SACA,GAAOD,G,OAEP,O,WAAA,GAAMJ,EAAY3D,EAAsB0C,I,OACxC,MADA,SACM,E,wBAIV,SAAeM,EACbhD,EACAX,G,sHAEc,SAAMuB,EAClBZ,EACAX,I,OAOF,OATML,EAAQ,SAIRd,EAA6B,CACjCc,MAAK,EACLE,WAAYC,KAAKC,MACjBC,oBAAmB,GAErB,GAAMgB,EAAML,EAAsB9B,I,OAClC,OADA,SACA,GAAOA,EAAac,cAMtB,SAAe6D,EACbH,EACAnD,G,oHAEqB,SAAMmD,EAAekB,YAAYC,mB,OACtD,OADMI,EAAe,UAEnB,GAAOA,GAET,GAAOvB,EAAekB,YAAYM,UAAU,CAC1CC,iBAAiB,EAGjBC,qBAAsBtH,EAAcyC,a,SClJxB8E,EAAiBC,GAE/B,MAAuB,kBAATA,KAAuBA,GAAQjI,KAAuBiI,E,SCJtDC,EAAMC,GACpB,OAAO,IAAIC,SAAc,SAAAC,GACvBC,WAAWD,EAASF,MC2BxB,iBAaE,WACmBxE,GADnB,WACmB,KAAAA,uBATX,KAAA4E,0BAA4C,KAC5C,KAAArF,SAA0B,KAC1B,KAAAsF,iBAIuB,KAK7BC,KAAKC,iBAAiB,QAAQ,SAAAC,GAC5BA,EAAEC,UAAU,EAAKC,OAAOF,OAE1BF,KAAKC,iBAAiB,0BAA0B,SAAAC,GAC9CA,EAAEC,UAAU,EAAKE,YAAYH,OAE/BF,KAAKC,iBAAiB,qBAAqB,SAAAC,GACzCA,EAAEC,UAAU,EAAKG,oBAAoBJ,OA8N3C,OA1NE,sBAAI,kBAAG,C,IAAP,WACE,OAAOK,KAAKrF,qBAAqBsF,K,gCAkBnC,YAAAC,4BAAA,SAA4BC,GAG1B,GAFAH,KAAKT,2BAA4B,GAE5BY,GAAgC,oBAAbA,EACtB,MAAMrJ,EAAcsF,OAAM,sBAG5B4D,KAAKR,iBAAmBW,GAG1B,YAAAC,oBAAA,SACEC,GADF,WAME,OAHAL,KAAKT,2BAA4B,EACjCS,KAAKR,iBAAmBa,EAEjB,WACL,EAAKb,iBAAmB,OAMtB,YAAA1C,SAAN,W,mIACOkD,KAAK9F,SAAN,MAImB,GAAMQ,EAAMsF,KAAKrF,uB,OAAhC9B,EAAe,SACrBmH,KAAK9F,SACwC,QAA3C,EAAiC,QAAjC,EAAY,OAAZrB,QAAY,IAAZA,OAAY,EAAZA,EAAcmB,2BAAmB,eAAEE,gBAAQ,QAAInD,E,iBAGnD,SAAO+F,EACLkD,KAAKrF,qBACL8E,KAAKa,aACLN,KAAK9F,mBAMT,YAAAoE,YAAA,WACE,OAAOA,EAAY0B,KAAKrF,qBAAsB8E,KAAKa,eAGrD,YAAAC,kBAAA,WACE,MAAMzJ,EAAcsF,OAAM,6BAI5B,YAAAoE,kBAAA,SAAkBtG,GAChB,GAAsB,OAAlB8F,KAAK9F,SACP,MAAMpD,EAAcsF,OAAM,iCAG5B,GAAwB,kBAAblC,GAA6C,IAApBA,EAASrC,OAC3C,MAAMf,EAAcsF,OAAM,qBAG5B4D,KAAK9F,SAAWA,GAGlB,YAAAuG,iBAAA,WACE,MAAM3J,EAAcsF,OAAM,6BAG5B,YAAAsE,UAAA,WACE,MAAM5J,EAAcsF,OAAM,6BAG5B,YAAAuE,eAAA,WACE,MAAM7J,EAAcsF,OAAM,6BAatB,YAAAyD,OAAN,SAAae,G,0HAEX,OADMC,EAoIV,SAAmC,G,IACjC5B,EAAI,OAEJ,IAAKA,EACH,OAAO,KAGT,IACE,OAAOA,EAAK/C,OACZ,MAAO4E,GAEP,OAAO,MA/IiBC,CAA0BH,IAU/B,GAAMI,MARvB7C,QAAQ8C,MACNC,sGAGF,K,OAKF,OA8JJ,SAA2BC,GACzB,OAAOA,EAAWC,MAChB,SAAAC,GACE,MAA2B,YAA3BA,EAAOC,kBAGND,EAAOE,IAAIC,WAAW,0BApKrBC,CADEN,EAAa,UAEjB,GAAOO,EAAoCP,EAAYN,KAIrDc,GAAsB,EACpBd,EAAgBe,aACpB,GAAMC,EAAiBC,EAAoBjB,KADzC,O,OACF,SACAc,GAAsB,E,iBAKxB,OAC0B,IAAxBA,IACmC,IAAnC3B,KAAKT,0BAEL,KAGIS,KAAKR,mBACHuC,E,SC9LVlB,GAEA,IAAMkB,EAA0B,CAC9BC,KAAMnB,EAAgBmB,KAEtBC,YAAapB,EAAgBqB,cAO/B,OAGF,SACEH,EACAI,GAEA,GAAKA,EAAuBP,aAA5B,CAIAG,EAAQH,aAAe,GAEvB,IAAMQ,EAAQD,EAAuBP,aAAcQ,MAC7CA,IACJL,EAAQH,aAAcQ,MAAQA,GAGhC,IAAM1G,EAAOyG,EAAuBP,aAAclG,KAC5CA,IACJqG,EAAQH,aAAclG,KAAOA,GAG/B,IAAM2G,EAAQF,EAAuBP,aAAcS,MAC7CA,IACJN,EAAQH,aAAcS,MAAQA,IA7BhCC,CAA6BP,EAASlB,GAiCxC,SACEkB,EACAI,GAEKA,EAAuBlD,OAI5B8C,EAAQ9C,KAAOkD,EAAuBlD,MAxCtCsD,CAAqBR,EAASlB,GA2ChC,SACEkB,EACAI,GAEA,GAAKA,EAAuBK,WAA5B,CAIAT,EAAQS,WAAa,GAErB,IAAMC,EAAON,EAAuBK,WAAYC,KAC1CA,IACJV,EAAQS,WAAYC,KAAOA,GAI7B,IAAMC,EAAiBP,EAAuBK,WAAYG,gBACpDD,IACJX,EAAQS,WAAYE,eAAiBA,IA5DvCE,CAAoBb,EAASlB,GAEtBkB,EDkLac,CAAmBhC,GAEE,oBAA1Bb,KAAKR,iBACdQ,KAAKR,iBAAiBuC,GAEtB/B,KAAKR,iBAAiBsD,KAAKf,IAK/B,GAAM7C,ERtL+C,O,cQsLrD,S,YAGI,YAAAY,YAAN,SAAkBc,G,mIACYA,EAAL,gBACnB,MAEF,GAAMtC,EAAY0B,KAAKrF,qBAAsB8E,KAAKa,e,OAClD,OADA,SACA,I,OAGmB,SAAM5F,EAAMsF,KAAKrF,uB,OACtC,OADM9B,EAAe,SACrB,GAAMyF,EAAY0B,KAAKrF,qBAAsB8E,KAAKa,e,OAClD,OADA,SACA,GAAMxD,EACJkD,KAAKrF,qBACL8E,KAAKa,aACsC,QAA3C,EAAiC,QAAjC,EAAY,OAAZzH,QAAY,IAAZA,OAAY,EAAZA,EAAcmB,2BAAmB,eAAEE,gBAAQ,QAAInD,I,cAHjD,S,YAOI,YAAAgJ,oBAAN,SAA0Ba,G,oIAIxB,OAHMC,EACoB,QAAxB,EAAkB,QAAlB,EAAAD,EAAMgB,oBAAY,eAAE3C,YAAI,wBAIf2B,EAAMmC,OAGf,KAIFnC,EAAMoC,2BACNpC,EAAMgB,aAAazH,SAGbsI,EA2IV,SAAiBV,G,UAETU,EAA+B,QAAxB,EAAkB,QAAlB,EAAAV,EAAQS,kBAAU,eAAEC,YAAI,QAAwB,QAApB,EAAAV,EAAQH,oBAAY,eAAEqB,aAC/D,GAAIR,EACF,OAAOA,EAGT,OAAIzD,EAAiB+C,EAAQ9C,MAEpBQ,KAAKyD,SAASC,OAEd,KAtJMC,CAAQvC,KAMfU,EAAM,IAAI8B,IAAIZ,EAAMhD,KAAKyD,SAASI,MAClCC,EAAY,IAAIF,IAAI5D,KAAKyD,SAASC,QAEpC5B,EAAIiC,OAASD,EAAUC,KACzB,IAGW,GAAMC,EAAgBlC,KAXjC,KAdA,I,cAyBEF,EAAS,UAET,MACO,GAAM5B,KAAKiE,QAAQC,WAAWlB,I,OAIvC,OAJApB,EAAS,SAIT,GAAMnC,ER5OyC,M,cQ4O/C,S,aAES,SAAMmC,EAAOuC,S,OAAtBvC,EAAS,S,iBAGX,OAAKA,GAKLR,EAAgBgD,YAAcjN,EAAYkN,qBAC1CjD,EAAgBkD,qBAAsB,EACtC,GAAO1C,EAAO2C,YAAYnD,KALxB,YAON,EArPA,GAuPA,SAASiB,EACPjB,G,MAEMoD,EAAsB,eACrBpD,EAAgBe,cAUvB,OAJAqC,EAAuBhF,OAAI,MACzB,QAAW4B,EACZ,GAEMoD,EAsBT,SAAeR,EAAgBlC,G,gIACV,SAAMP,K,OAAnBG,EAAa,S,IAEnB,IAAqB,cAAAA,GAAU,8BAG7B,GAHSE,EAAM,QACT6C,EAAY,IAAIb,IAAIhC,EAAOE,IAAK9B,KAAKyD,SAASI,MAEhD/B,EAAIiC,OAASU,EAAUV,KACzB,SAAOnC,G,iGAIX,SAAO,aAiBT,SAASK,EACPP,EACAN,G,QAEAA,EAAgBkD,qBAAsB,EACtClD,EAAgBgD,YAAcjN,EAAYuN,c,IAE1C,IAAqB,kBAAAhD,GAAU,8BAAE,CAAhB,QACR6C,YAAYnD,I,kGAIvB,SAASG,IACP,OAAOvB,KAAKiE,QAAQU,SAAS,CAC3BC,KAAM,SACNC,qBAAqB,IAKzB,SAASzC,EACP0C,G,MAIQC,EAAYD,EAAL,QACPE,EAAenH,aAAL,WAOlB,OANIkH,GAAWC,GAAcD,EAAQ3M,OAAS4M,GAC5CtG,QAAQC,KACN,8BAA8BqG,EAAU,0DAIrChF,KAAKa,aAAauB,iBACuB,QAAjC,EAAA0C,EAA4BnC,aAAK,QAAI,GAClDmC,GEhWJ,iBAKE,WACmB5J,GADnB,WACmB,KAAAA,uBALX,KAAAT,SAA0B,KAE1B,KAAAwK,kBAA8D,KAKpEC,UAAUC,cAAclF,iBAAiB,WAAW,SAAAC,GAClD,SAAKkF,qBAAqBlF,MAoOhC,OAhOE,sBAAI,kBAAG,C,IAAP,WACE,OAAOK,KAAKrF,qBAAqBsF,K,gCAGrB,YAAA4E,qBAAd,SAAmCjE,G,sHAGjC,OAFMC,EAAkBD,EAAM3B,MAET8E,qBAQnB/D,KAAK0E,mBACL7D,EAAgBgD,cAAgBjN,EAAYuN,gBAEN,oBAA3BnE,KAAK0E,kBACd1E,KAAK0E,kBA0Nb,SACE7D,GAIA,cAFOA,EAAgBgD,mBAChBhD,EAAgBkD,oBAChBlD,EA9NCiE,CAAoBC,OAAOC,OAAO,GAAInE,KAGxCb,KAAK0E,kBAAkB5B,KAAKiC,OAAOC,OAAO,GAAInE,KAOhD7B,EAHIiG,EAAcpE,EAAgB5B,OAIkB,MAApDgG,EVvD4C,gBUyD5C,GAAMjF,KAAKkF,SAASrE,EAAgBgD,YAAcoB,IAHlD,OAtBA,I,OAyBA,S,mCAIJ,YAAAE,YAAA,WACE,OAAOnF,KAAK9F,UAGd,YAAAkL,SAAA,WACE,OAAOpF,KAAK3C,gBAGR,YAAAP,SAAN,SAAeuI,G,oHAImB,YAA5B/H,aAAaC,WAAb,MACF,GAAMD,aAAaiD,qB,OAAnB,S,iBAGF,GAAgC,YAA5BjD,aAAaC,WACf,MAAMzG,EAAcsF,OAAM,sBAG5B,SAAM4D,KAAKsF,eAAsB,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAASnL,W,OACnC,OADA,SACA,GAAM8F,KAAKuF,YAAmB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASG,4B,OAEhC,OAFA,SAEA,GAAO1I,EACLkD,KAAKrF,qBACLqF,KAAK3C,eACL2C,KAAK9F,mBAIH,YAAAoL,eAAN,SAAqBpL,G,8FACbA,EACJ8F,KAAK9F,SAAWA,EACN8F,KAAK9F,WACf8F,KAAK9F,SAAWnD,G,WAId,YAAAwO,YAAN,SACElI,G,qHAEKA,GAAmB2C,KAAK3C,eAAzB,MACF,GAAM2C,KAAKyF,qB,OAAX,S,iBAGF,IAAKpI,GAAoB2C,KAAK3C,eAC5B,UAGF,KAAMA,aAA0BqI,2BAC9B,MAAM5O,EAAcsF,OAAM,2B,OAG5B4D,KAAK3C,eAAiBA,E,YAGV,YAAAoI,kBAAd,W,sHAE0B,O,sBAAtB,EAAAzF,KAAsB,GAAM2E,UAAUC,cAAce,SVpI3B,4BUsIvB,CACEjI,MVtIsB,0C,cUmI1B,EAAKL,eAAiB,SAYtB2C,KAAK3C,eAAeuI,SAASC,OAAM,e,aAInC,M,WAAM/O,EAAcsF,OAAM,qCAAwC,CAChE0J,oBAAqB,EAAEvJ,U,yBAKvB,YAAA+B,YAAN,W,qHACO0B,KAAK3C,eAAN,MACF,GAAM2C,KAAKyF,qB,OAAX,S,iBAGF,SAAOnH,EAAY0B,KAAKrF,qBAAsBqF,KAAK3C,yBAW/C,YAAAkD,kBAAN,W,oHACE,MAAgC,YAA5BjD,aAAaC,WACf,IAGuB,GAAMD,aAAaiD,qB,OAC5C,GAAyB,aADnBwF,EAAmB,UAEvB,UACK,KAAyB,WAArBA,EACHjP,EAAcsF,OAAM,sBAEpBtF,EAAcsF,OAAM,8BAQ9B,YAAAoE,kBAAA,SAAkBtG,GAChB,GAAsB,OAAlB8F,KAAK9F,SACP,MAAMpD,EAAcsF,OAAM,iCAG5B,GAAwB,kBAAblC,GAA6C,IAApBA,EAASrC,OAC3C,MAAMf,EAAcsF,OAAM,qBAG5B4D,KAAK9F,SAAWA,GAOlB,YAAAuG,iBAAA,SAAiBpD,GACf,KAAMA,aAA0BqI,2BAC9B,MAAM5O,EAAcsF,OAAM,2BAG5B,GAAI4D,KAAK3C,eACP,MAAMvG,EAAcsF,OAAM,0BAG5B4D,KAAK3C,eAAiBA,GAQxB,YAAAqD,UAAA,SAAUL,GAAV,WAGE,OAFAL,KAAK0E,kBAAoBrE,EAElB,WACL,EAAKqE,kBAAoB,OAI7B,YAAAxE,4BAAA,WACE,MAAMpJ,EAAcsF,OAAM,yBAG5B,YAAAgE,oBAAA,WACE,MAAMtJ,EAAcsF,OAAM,yBAO5B,YAAAuE,eAAA,WACE,OAAO,cAGK,YAAAuE,SAAd,SACErB,EACA5E,G,oHAGkB,OADZ+G,EAaV,SAAsBnC,GACpB,OAAQA,GACN,KAAKjN,EAAYkN,qBACf,MAAO,oBACT,KAAKlN,EAAYuN,cACf,MAAO,0BACT,QACE,MAAM,IAAI8B,OApBMC,CAAarC,GACb,GAAM7D,KAAKrF,qBAAqBwL,kBAAkB/M,O,cAAlD,SACR8L,SAASc,EAAW,CAE5BI,WAAYnH,EAAKjI,mBACjBqP,aAAcpH,EV/OiB,kBUgP/BqH,aAAcrH,EVjPiB,iBUkP/BsH,oBAAqBC,KAAKC,MAAM3M,KAAKC,MAAQ,O,YAInD,EA7OA,GCeA,SAAS2M,EAAqBC,GAC5B,OAAO7P,EAAcsF,OAAM,4BAAsC,CAC/DuK,UAAS,ICSb,IAAMC,EAAoB,CACxBC,YAAW,GA0Bb,SAASA,IACP,OAAIpH,MAAQ,6BAA8BA,KA+BxC,cAAeA,MACD,OAAdlH,WACA,gBAAiBkH,MACjB,iBAAkBA,MAClBiG,0BAA0BoB,UAAUC,eAAe,qBACnDC,iBAAiBF,UAAUC,eAAe,UAtB1C,cAAeE,QACD,OAAd1O,WACAoM,UAAUuC,eACV,kBAAmBvC,WACnB,gBAAiBsC,QACjB,iBAAkBA,QAClB,UAAWA,QACXvB,0BAA0BoB,UAAUC,eAAe,qBACnDC,iBAAiBF,UAAUC,eAAe,UA9C7C,IAAgCI,SAASC,kBACxC,IAAI,IAnCiB,aACvB,SACEC,GAGA,IAAMpH,EAAMoH,EAAUC,YAAY,OAAOC,eAKnC5M,EAAqD,CACzDsF,IAAG,EACHnF,U,SD1B6BmF,G,QAC/B,IAAKA,IAAQA,EAAIoF,QACf,MAAMqB,EAAqB,4BAG7B,IAAKzG,EAAItH,KACP,MAAM+N,EAAqB,YAI7B,IAOQrB,EAAYpF,EAAL,Q,IACf,IAAsB,kBARmC,CACvD,YACA,SACA,QACA,sBAI8B,8BAAE,CAA7B,IAAMuH,EAAO,QAChB,IAAKnC,EAAQmC,GACX,MAAMd,EAAqBc,I,iGAI/B,MAAO,CACLC,QAASxH,EAAItH,KACb+O,UAAWrC,EAAQqC,UACnBxK,OAAQmI,EAAQnI,OAChB5B,MAAO+J,EAAQ/J,MACfhD,SAAU+M,EAAQsC,mBCTFC,CAAiB3H,GAOjCpD,cANoBwK,EAAUC,YAAY,iBAAiBC,eAO3DpB,kBANwBkB,EAAUC,YAAY,uBAShD,IAAKT,IACH,MAAM/P,EAAcsF,OAAM,uBAG5B,OAAIqD,MAAQ,6BAA8BA,KAEjC,IAAI,EAAa9E,GAGjB,IAAI,EAAiBA,KAWf,UAEbkN,gBAAgBjB","file":"static/js/8.df4ef4f5.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n// Key of FCM Payload in Notification's data field.\nexport const FCM_MSG = 'FCM_MSG';\nexport const TAG = 'FirebaseMessaging: ';\n\n// Set to '1' if Analytics is enabled for the campaign\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\n\n// Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push\n// warning might be shown by the browser if the callback fails to completes by the end of onPush.\n// Experiments were ran to determine the majority onBackground message clock time. This brief\n// blocking time would allow majority of the onBackgroundMessage callback to finish.\nexport const BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;\n\n// Preparation time for client to initialize and set up the message handler.\nexport const FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from '../helpers/idb-manager';\nimport { requestDeleteToken, requestGetToken, requestUpdateToken } from './api';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription is generated and\n  // returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS,\n  DEFAULT_VAPID_KEY,\n  FCM_MSG,\n  FOREGROUND_HANDLE_PREPARATION_TIME_MS,\n  TAG\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseMessaging, MessagePayload } from '@firebase/messaging-types';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { dbGet } from '../helpers/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  // A boolean flag to determine wether an app is using onBackgroundMessage or\n  // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n  // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n  // MessagePayload if a NotificationPayload is included.\n  private isOnBackgroundMessageUsed: boolean | null = null;\n  private vapidKey: string | null = null;\n  private bgMessageHandler:\n    | null\n    | BgMessageHandler\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload> = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\n   * Unsubscribe instead.\n   *\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\n   *\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\n   * contains no notification data this method will be called and the promise it returns will be\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\n   * the developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received and a notification\n   * must be shown. The callback will be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n\n    return () => {\n      this.bgMessageHandler = null;\n    };\n  }\n\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token. This is needed\n      // because usePublicVapidKey was not available in SW. It will be removed when vapidKey becomes\n      // a parameter of getToken, or when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\n   * `notification` property will be used as the NotificationOptions object passed to\n   * showNotification. Additionally, the `title` property of the notification object will be used as\n   * the title.\n   *\n   * If there is no notification data in the payload then no notification will be shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const internalPayload = getMessagePayloadInternal(event);\n    if (!internalPayload) {\n      console.debug(\n        TAG +\n          'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.'\n      );\n      return;\n    }\n\n    // foreground handling: eventually passed to onMessage hook\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n    }\n\n    // background handling: display and pass to onBackgroundMessage hook\n    let isNotificationShown = false;\n    if (!!internalPayload.notification) {\n      await showNotification(wrapInternalPayload(internalPayload));\n      isNotificationShown = true;\n    }\n\n    // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n    // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n    if (\n      isNotificationShown === true &&\n      this.isOnBackgroundMessageUsed === false\n    ) {\n      return;\n    }\n\n    if (!!this.bgMessageHandler) {\n      const payload = externalizePayload(internalPayload);\n\n      if (typeof this.bgMessageHandler === 'function') {\n        this.bgMessageHandler(payload);\n      } else {\n        this.bgMessageHandler.next(payload);\n      }\n    }\n\n    // wait briefly to allow onBackgroundMessage to complete\n    await sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS);\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const internalPayload: MessagePayloadInternal =\n      event.notification?.data?.[FCM_MSG];\n\n    if (!internalPayload) {\n      return;\n    } else if (event.action) {\n      // User clicked on an action button. This will allow developers to act on action button clicks\n      // by using a custom onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    // Note clicking on a notification with no link set will focus the Chrome's current tab.\n    const link = getLink(internalPayload);\n    if (!link) {\n      return;\n    }\n\n    // FM should only open/focus links from app's origin.\n    const url = new URL(link, self.location.href);\n    const originUrl = new URL(self.location.origin);\n\n    if (url.host !== originUrl.host) {\n      return;\n    }\n\n    let client = await getWindowClient(url);\n\n    if (!client) {\n      client = await self.clients.openWindow(link);\n\n      // Wait three seconds for the client to initialize and set up the message handler so that it\n      // can receive the message.\n      await sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n    internalPayload.isFirebaseMessaging = true;\n    return client.postMessage(internalPayload);\n  }\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...((internalPayload.notification as unknown) as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '@firebase/messaging-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { isConsoleMessage } from '../helpers/is-console-message';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | Observer<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    const internalPayload = event.data as MessagePayloadInternal;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    // onMessageCallback is either a function or observer/subscriber.\n    // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n    // the legacy payload where some fields are in snake cases.\n    if (\n      this.onMessageCallback &&\n      internalPayload.messageType === MessageType.PUSH_RECEIVED\n    ) {\n      if (typeof this.onMessageCallback === 'function') {\n        this.onMessageCallback(\n          stripInternalFields(Object.assign({}, internalPayload))\n        );\n      } else {\n        this.onMessageCallback.next(Object.assign({}, internalPayload));\n      }\n    }\n\n    const dataPayload = internalPayload.data;\n\n    if (\n      isConsoleMessage(dataPayload) &&\n      dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      await this.logEvent(internalPayload.messageType!, dataPayload);\n    }\n  }\n\n  getVapidKey(): string | null {\n    return this.vapidKey;\n  }\n\n  getSwReg(): ServiceWorkerRegistration | undefined {\n    return this.swRegistration;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    await this.updateVapidKey(options?.vapidKey);\n    await this.updateSwReg(options?.serviceWorkerRegistration);\n\n    return getToken(\n      this.firebaseDependencies,\n      this.swRegistration!,\n      this.vapidKey!\n    );\n  }\n\n  async updateVapidKey(vapidKey?: string | undefined): Promise<void> {\n    if (!!vapidKey) {\n      this.vapidKey = vapidKey;\n    } else if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  }\n\n  async updateSwReg(\n    swRegistration?: ServiceWorkerRegistration | undefined\n  ): Promise<void> {\n    if (!swRegistration && !this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    if (!swRegistration && !!this.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  private async registerDefaultSw(): Promise<void> {\n    try {\n      this.swRegistration = await navigator.serviceWorker.register(\n        DEFAULT_SW_PATH,\n        {\n          scope: DEFAULT_SW_SCOPE\n        }\n      );\n\n      // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n      this.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: e.message\n      });\n    }\n  }\n\n  async deleteToken(): Promise<boolean> {\n    if (!this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    return deleteToken(this.firebaseDependencies, this.swRegistration!);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on message.\n   *\n   * @return The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback = nextOrObserver;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  onBackgroundMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  /**\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\n   * However, the plan to implement such feature was abandoned.\n   */\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(\n  internalPayload: MessagePayloadInternal\n): MessagePayloadInternal {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport {\n  FirebaseService,\n  _FirebaseNamespace\n} from '@firebase/app-types/private';\n\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { SwController } from './controllers/sw-controller';\nimport { WindowController } from './controllers/window-controller';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport firebase from '@firebase/app';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n"],"sourceRoot":""}